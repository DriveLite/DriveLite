import { clerkMiddleware } from "@clerk/nextjs/server";

export default clerkMiddleware();

export const config = {
  matcher: [
    // Skip Next.js internals and all static files, unless found in search params
    "/((?!_next|[^?]*\\.(?:html?|css|js(?!on)|jpe?g|webp|png|gif|svg|ttf|woff2?|ico|csv|docx?|xlsx?|zip|webmanifest)).*)",
    // Always run for API routes
    "/(api|trpc)(.*)",
  ],
};
import { rateLimit } from "@/lib/ratelimit";
import supabase from "@/lib/supabase";
import { NextResponse } from "next/server";
import WelcomeEmail from "@/Components/WelcomeEmail";
import { Resend } from "resend";

const resend = new Resend(process.env.RESEND_API_KEY!);
export async function POST(req: Request) {
  const ip = req.headers.get("x-forwarded-for") || "unknown";
  const { success } = await rateLimit.limit(ip);

  if (!success) {
    return NextResponse.json({ error: "Rate limit exceeded" }, { status: 429 });
  }

  const { email } = await req.json();
  const normalizedEmail = email.toLowerCase();

  const { error } = await supabase
    .from("waitlist_emails")
    .insert([{ email: normalizedEmail }]);

  if (error) {
    if (error.code === "23505") {
      return NextResponse.json(
        {
          success: true,
          message: "You are already on the waitlist.",
        },
        { status: 200 },
      );
    }
    return NextResponse.json(
      { error: "Failed to join waitlist.Please try again." },
      { status: 500 },
    );
  }

  resend.emails.send({
    from: "welcome@drivelite.org",
    to: email,
    subject: "Welcome to DriveLite!",
    react: WelcomeEmail({ email }),
  });

  return NextResponse.json(
    { success: true, message: "You've been added to the waitlist!" },
    { status: 200 },
  );
}
import supabase from "@/lib/supabase";
import { NextResponse } from "next/server";

export async function GET() {
  const { data, error } = await supabase
    .from("posts")
    .select("*")
    .order("created_at", { ascending: false });

  if (error) return NextResponse.json({ error: error.message }, { status: 400 });
  return NextResponse.json({ data });
}import supabase from "@/lib/supabase";
import { NextResponse } from "next/server";

export async function GET() {
  const { data, error } = await supabase
    .from("posts")
    .select("*")
    .order("created_at", { ascending: false })
    .limit(3);

  if (error) return NextResponse.json({ error: error.message }, { status: 400 });
  return NextResponse.json({ data });
}
import { NextResponse, NextRequest } from "next/server";
import { getAuth } from "@clerk/nextjs/server";

export async function GET(request: NextRequest) {
  const { userId } = getAuth(request);
  const adminId = process.env.ADMIN_ID;

  if (!userId) {
    return NextResponse.json({ isAdmin: false }, { status: 401 });
  }

  const isAdmin = userId === adminId;
  return NextResponse.json({ isAdmin });
}
import { supabaseAdmin } from "@/lib/supabase";
import {  getAuth } from "@clerk/nextjs/server";
import { NextRequest, NextResponse } from "next/server";

export async function POST(req:NextRequest) {
    const {userId} = getAuth(req)
    if (userId !== process.env.ADMIN_ID) {
        return NextResponse.json({ error: "Unauthorized" }, { status: 403 });
    }
    const body = await req.json();
    const { title, content } = body;
    const { data, error } = await supabaseAdmin
    .from("posts")
    .insert([{ title, content }]);

    if (error) return NextResponse.json({ error: error.message }, { status: 400 });
    return NextResponse.json({ data });
}

export async function PUT(req: NextRequest) {
    const {userId} = getAuth(req) 
    if (userId !== process.env.ADMIN_ID) {
        return NextResponse.json({error:"Unauthorized"},{status:403})
    }
    const body = await req.json();
    const { id, title, content } = body;
    const { data, error } = await supabaseAdmin
    .from("posts")
    .update({ title, content })
    .eq("id", id);
    if (error) return NextResponse.json({ error: error.message }, { status: 400 });
    return NextResponse.json({ data });
}

export async function DELETE(req: NextRequest) {
  const { userId } = getAuth(req);
  if (userId !== process.env.CLERK_ADMIN_ID) {
    return NextResponse.json({ error: "Unauthorized" }, { status: 403 });
  }

  const body = await req.json();
  const { id } = body;

  const { data, error } = await supabaseAdmin
    .from("posts")
    .delete()
    .eq("id", id);

  if (error) return NextResponse.json({ error: error.message }, { status: 400 });
  return NextResponse.json({ data });
}"use client";

import { useAuth } from "@clerk/nextjs";
import { useEffect, useState } from "react";

export function useAdmin() {
  const { isSignedIn } = useAuth();
  const [isAdmin, setIsAdmin] = useState(false);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    if (!isSignedIn) {
      setIsAdmin(false);
      setLoading(false);
      return;
    }

    setLoading(true);
    fetch("/api/auth/admin")
      .then((res) => res.json())
      .then((data) => {
        setIsAdmin(data.isAdmin);
        setLoading(false);
      })
      .catch(() => {
        setIsAdmin(false);
        setLoading(false);
      });
  }, [isSignedIn]);

  return { isSignedIn, isAdmin, loading };
}
import { clsx, type ClassValue } from "clsx"
import { twMerge } from "tailwind-merge"

export function cn(...inputs: ClassValue[]) {
  return twMerge(clsx(inputs))
}
import { Ratelimit } from "@upstash/ratelimit";
import { Redis } from "@upstash/redis";

const redis = Redis.fromEnv();

export const rateLimit = new Ratelimit({
  redis,
  limiter: Ratelimit.slidingWindow(5, "1 m"),
});
import { createClient } from "@supabase/supabase-js";

const supabase = createClient(
  process.env.NEXT_PUBLIC_SUPABASE_URL ?? "",
  process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY ?? "",
);

export const supabaseAdmin = createClient(
  process.env.NEXT_PUBLIC_SUPABASE_URL!,
  process.env.SUPABASE_SERVICE_ROLE_KEY! 
)

export default supabase;
